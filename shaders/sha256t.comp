#version 450
layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;
layout(push_constant) uniform Push { uint prefix76[19]; uint nonceBase; } pc;
layout(std430, binding = 0) writeonly buffer OutBuf { uint outWords[]; };

uint rotr(uint x, uint n){ return (x>>n)|(x<<(32u-n)); }
uint Ch(uint x,uint y,uint z){ return (x & y) ^ (~x & z); }
uint Maj(uint x,uint y,uint z){ return (x & y) ^ (x & z) ^ (y & z); }
uint BSIG0(uint x){ return rotr(x,2)^rotr(x,13)^rotr(x,22); }
uint BSIG1(uint x){ return rotr(x,6)^rotr(x,11)^rotr(x,25); }
uint SSIG0(uint x){ return rotr(x,7)^rotr(x,18)^(x>>3); }
uint SSIG1(uint x){ return rotr(x,17)^rotr(x,19)^(x>>10); }

const uint K[64]=uint[64](
0x428a2f98u,0x71374491u,0xb5c0fbcfu,0xe9b5dba5u,0x3956c25bu,0x59f111f1u,0x923f82a4u,0xab1c5ed5u,
0xd807aa98u,0x12835b01u,0x243185beu,0x550c7dc3u,0x72be5d74u,0x80deb1feu,0x9bdc06a7u,0xc19bf174u,
0xe49b69c1u,0xefbe4786u,0x0fc19dc6u,0x240ca1ccu,0x2de92c6fu,0x4a7484aau,0x5cb0a9dcu,0x76f988dau,
0x983e5152u,0xa831c66du,0xb00327c8u,0xbf597fc7u,0xc6e00bf3u,0xd5a79147u,0x06ca6351u,0x14292967u,
0x27b70a85u,0x2e1b2138u,0x4d2c6dfcu,0x53380d13u,0x650a7354u,0x766a0abbu,0x81c2c92eu,0x92722c85u,
0xa2bfe8a1u,0xa81a664bu,0xc24b8b70u,0xc76c51a3u,0xd192e819u,0xd6990624u,0xf40e3585u,0x106aa070u,
0x19a4c116u,0x1e376c08u,0x2748774cu,0x34b0bcb5u,0x391c0cb3u,0x4ed8aa4au,0x5b9cca4fu,0x682e6ff3u,
0x748f82eeu,0x78a5636fu,0x84c87814u,0x8cc70208u,0x90befffau,0xa4506cebu,0xbef9a3f7u,0xc67178f2u
);

void compress(inout uint H0,inout uint H1,inout uint H2,inout uint H3,inout uint H4,inout uint H5,inout uint H6,inout uint H7,in uint M16[16]){
    uint a=H0,b=H1,c=H2,d=H3,e=H4,f=H5,g=H6,h=H7;
    uint W[64];
    for(int t=0;t<16;t++) W[t]=M16[t];
    for(int t=16;t<64;t++) W[t]=SSIG1(W[t-2])+W[t-7]+SSIG0(W[t-15])+W[t-16];
    for(int t=0;t<64;t++){
        uint T1=h+BSIG1(e)+Ch(e,f,g)+K[t]+W[t];
        uint T2=BSIG0(a)+Maj(a,b,c);
        h=g; g=f; f=e; e=d+T1; d=c; c=b; b=a; a=T1+T2;
    }
    H0+=a;H1+=b;H2+=c;H3+=d;H4+=e;H5+=f;H6+=g;H7+=h;
}

void sha256_80_triple(out uint out8[8], uint w20[20]){
    uint H0=0x6a09e667u,H1=0xbb67ae85u,H2=0x3c6ef372u,H3=0xa54ff53au,H4=0x510e527fu,H5=0x9b05688cu,H6=0x1f83d9abu,H7=0x5be0cd19u;
    uint M0[16]; for(int i=0;i<16;i++) M0[i]=w20[i]; compress(H0,H1,H2,H3,H4,H5,H6,H7,M0);
    uint M1[16]; M1[0]=w20[16];M1[1]=w20[17];M1[2]=w20[18];M1[3]=w20[19]; M1[4]=0x80000000u; for(int i=5;i<15;i++) M1[i]=0u; M1[15]=640u;
    compress(H0,H1,H2,H3,H4,H5,H6,H7,M1);

    uint A0=0x6a09e667u,A1=0xbb67ae85u,A2=0x3c6ef372u,A3=0xa54ff53au,A4=0x510e527fu,A5=0x9b05688cu,A6=0x1f83d9abu,A7=0x5be0cd19u;
    uint M2[16]; M2[0]=H0;M2[1]=H1;M2[2]=H2;M2[3]=H3;M2[4]=H4;M2[5]=H5;M2[6]=H6;M2[7]=H7; M2[8]=0x80000000u; for(int i=9;i<15;i++) M2[i]=0u; M2[15]=256u;
    compress(A0,A1,A2,A3,A4,A5,A6,A7,M2);

    uint B0=0x6a09e667u,B1=0xbb67ae85u,B2=0x3c6ef372u,B3=0xa54ff53au,B4=0x510e527fu,B5=0x9b05688cu,B6=0x1f83d9abu,B7=0x5be0cd19u;
    uint M3[16]; M3[0]=A0;M3[1]=A1;M3[2]=A2;M3[3]=A3;M3[4]=A4;M3[5]=A5;M3[6]=A6;M3[7]=A7; M3[8]=0x80000000u; for(int i=9;i<15;i++) M3[i]=0u; M3[15]=256u;
    compress(B0,B1,B2,B3,B4,B5,B6,B7,M3);

    out8[0]=B0; out8[1]=B1; out8[2]=B2; out8[3]=B3; out8[4]=B4; out8[5]=B5; out8[6]=B6; out8[7]=B7;
}

void main(){
    uint gid=gl_GlobalInvocationID.x;
    uint words[20];
    for(int i=0;i<19;i++) words[i]=pc.prefix76[i];
    words[19]=pc.nonceBase + gid;
    uint H[8]; sha256_80_triple(H,words);
    uint base=gid*8u; for(int i=0;i<8;i++) outWords[base+i]=H[i];
}
